(defun saxpy (z a x y)
  "Compute BLAS Level 1 SAXPY operation: zi = a * xi + yi with map-inot CL procedure"
  (declare (type single-float a))
  (declare (type (simple-array single-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((f (lambda (xi yi)
             (+ (* a xi) yi))))
    (map-into z f x y)))

(defun daxpy (z a x y)
  "Compute BLAS Level 1 DAXPY operation: zi = a * xi + yi with map-inot CL procedure"
  (declare (type double-float a))
  (declare (type (simple-array double-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((f (lambda (xi yi)
             (+ (* a xi) yi))))
    (map-into z f x y)))

(defmacro timing (&body forms)
  (let ((real1 (gensym))
        (real2 (gensym))
        (run1 (gensym))
        (run2 (gensym))
        (result (gensym)))
    `(let* ((,real1 (get-internal-real-time))
            (,run1 (get-internal-run-time))
            (,result (progn ,@forms))
            (,run2 (get-internal-run-time))
            (,real2 (get-internal-real-time)))
       (values ,result
               (float (/ (- ,real2 ,real1) internal-time-units-per-second))
               (float (/ (- ,run2 ,run1) internal-time-units-per-second))))))

(defun bench (f type valx valy valz vala N M)
  "Bench for procedure that takes z a x y like saxpy/daxpy"
  (let ((z (make-array N :element-type type :initial-element valz))
        (x (make-array N :element-type type :initial-element valx))
        (y (make-array N :element-type type :initial-element valy))
        (a vala))
    (timing (dotimes (i M) (funcall f z a x y)))))

(defun main (argv)
  (declare (ignore argv))
  (format t "Size, Execution Time (ms)~%")
  (let ((ns (list 10 100 1000 10000 100000 1000000 10000000 100000000))
        (m 10))
    (mapcar (lambda (n)
              (multiple-value-bind (result realtime runtime) (bench #'daxpy 'double-float 3.6d0 4.9d0 0.0d0 1.5d0 n m)
                (declare (ignore result runtime))
                (format t "~d, ~f~%" n (* (/ realtime m) 1000))))
            ns)))
