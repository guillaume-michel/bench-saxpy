(defun saxpy (z a x y)
  (declare (type single-float a))
  (declare (type (simple-array single-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((size (array-dimension x 0)))
    (dotimes (i size)
      (setf (aref z i) (+ (* a (aref x i)) (aref y i))))))

(defun rand-array (N max)
  (let ((x (make-array N :element-type 'single-float)))
    (dotimes (i N)
      (setf (aref x i) (random max)))
    x))

(defmacro timing (&body forms)
  (let ((real1 (gensym))
        (real2 (gensym))
        (run1 (gensym))
        (run2 (gensym))
        (result (gensym)))
    `(let* ((,real1 (get-internal-real-time))
            (,run1 (get-internal-run-time))
            (,result (progn ,@forms))
            (,run2 (get-internal-run-time))
            (,real2 (get-internal-real-time)))
       (format *debug-io* ";;; Computation took:~%")
       (format *debug-io* ";;;  ~f seconds of real time~%"
               (/ (- ,real2 ,real1) internal-time-units-per-second))
       (format t ";;;  ~f seconds of run time~%"
               (/ (- ,run2 ,run1) internal-time-units-per-second))
       ,result)))

(defun bench (valx valy N)
  (let ((z (make-array N :element-type 'single-float :initial-element 0.0))
        (x (make-array N :element-type 'single-float :initial-element valx))
        (y (make-array N :element-type 'single-float :initial-element valy))
        (a 1.5))
    (time (saxpy z a x y))
    (aref z 0)))

(defun bench2 (valx valy N)
  (let ((z (make-array N :element-type 'single-float :initial-element 0.0))
        (x (rand-array N valx))
        (y (rand-array N valy))
        (a (random 10.0)))
    (sb-ext:gc)
    (time (saxpy z a x y))
    (aref z 0)))

;;(setf (sb-ext:bytes-consed-between-gcs) (* 14 1024 1024 1024))
;;(bench2 3.6 4.9 10000000)

(defun main (argv)
  (declare (ignore argv))
  (setf (sb-ext:bytes-consed-between-gcs) (* 14 1024 1024 1024))
  (bench2 3.6 4.9 100000000))
