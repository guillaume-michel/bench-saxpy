(defun saxpy (z a x y)
  (declare (type single-float a))
  (declare (type (simple-array single-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 3)
                     (debug 0)))
  (let ((size (array-dimension x 0)))
    (dotimes (i size)
      (setf (aref z i) (+ (* a (aref x i)) (aref y i))))))

(defun rand-array (N max)
  (let ((x (make-array N :element-type 'single-float)))
    (dotimes (i N)
      (setf (aref x i) (random max)))
    x))

(defmacro benchmark (function-name argument-list)
  "do the function-name with argument-list, return estimate internal-time"
  `(let ((start (get-internal-real-time)))
     (funcall ,function-name ,argument-list)
     (float (/ (- (get-internal-real-time) start) internal-time-units-per-second))
     ))

(defun bench (valx valy N)
  (let ((z (make-array N :element-type 'single-float :initial-element 0.0))
        (x (make-array N :element-type 'single-float :initial-element valx))
        (y (make-array N :element-type 'single-float :initial-element valy))
        (a 1.5))
    (time (saxpy z a x y))
    (aref z 0)))

(defun bench2 (valx valy N)
  (let ((z (make-array N :element-type 'single-float :initial-element 0.0))
        (x (rand-array N valx))
        (y (rand-array N valy))
        (a (random 10.0)))
    (time (saxpy z a x y))
    (aref z 0)))

(bench2 3.6 4.9 1000000000)
