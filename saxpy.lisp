(defun saxpy (z a x y)
  "Compute BLAS Level 1 SAXPY operation: zi = a * xi + yi"
  (declare (type single-float a))
  (declare (type (simple-array single-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((size (array-dimension x 0)))
    (dotimes (i size)
      (setf (aref z i) (+ (* a (aref x i)) (aref y i))))))

(defun saxpy2 (z a x y)
  "Compute BLAS Level 1 SAXPY operation: zi = a * xi + yi with map-inot CL procedure"
  (declare (type single-float a))
  (declare (type (simple-array single-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((f (lambda (xi yi)
             (+ (* a xi) yi))))
    (map-into z f x y)))

(defun bench (f valx valy N M)
  "Bench for procedure that takes z a x y like saxpy"
  (let ((z (make-array N :element-type 'single-float :initial-element 0.0))
        (x (make-array N :element-type 'single-float :initial-element valx))
        (y (make-array N :element-type 'single-float :initial-element valy))
        (a 1.5))
    (time (dotimes (i M) (funcall f z a x y)))
    (aref z 0)))

(defun daxpy (z a x y)
  "Compute BLAS Level 1 DAXPY operation: zi = a * xi + yi"
  (declare (type double-float a))
  (declare (type (simple-array double-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((size (array-dimension x 0)))
    (dotimes (i size)
      (setf (aref z i) (+ (* a (aref x i)) (aref y i))))))

(defun daxpy2 (z a x y)
  "Compute BLAS Level 1 DAXPY operation: zi = a * xi + yi with map-inot CL procedure"
  (declare (type double-float a))
  (declare (type (simple-array double-float (*))
                 z x y))
  (declare (optimize (speed 3)
                     (compilation-speed 0)
                     (safety 0)
                     (debug 0)))
  (let ((f (lambda (xi yi)
             (+ (* a xi) yi))))
    (map-into z f x y)))

(defun bench-double (f valx valy N M)
  "Bench for procedure that takes z a x y like saxpy"
  (let ((z (make-array N :element-type 'double-float :initial-element 0.0d0))
        (x (make-array N :element-type 'double-float :initial-element valx))
        (y (make-array N :element-type 'double-float :initial-element valy))
        (a 1.5d0))
    (time (dotimes (i M) (funcall f z a x y)))
    (aref z 0)))

(defun main (argv)
  (declare (ignore argv))
  (let ((n 100000000)
        (m 10))
    (bench #'saxpy 3.6 4.9 n m)
    (bench #'saxpy2 3.6 4.9 n m)
    (bench-double #'daxpy 3.6d0 4.9d0 n m)
    (bench-double #'daxpy2 3.6d0 4.9d0 n m)))
